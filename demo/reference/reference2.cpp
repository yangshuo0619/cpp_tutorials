/*
向函数传递参数的 传值调用方法 ，把 参数的实际值 复制给 函数的形式参数。
在这种情况下，修改函数内的 形式参数 不会影响 实际参数。

默认情况下，C++ 使用传值调用方法来传递参数。
一般来说，这意味着函数内的代码不会改变用于调用函数的实际参数。
函数 swap() 定义如下：#include<iostream>
*/


/*
 向函数传递参数的 指针调用方法， 把参数的地址 复制给 形式参数。
 在函数内，该地址用于访问 调用中要用到的实际参数。这意味着， 修改形式参数会影响实际参数。

 按指针传递值，参数指针 被传递给函数，就像传递其他值给函数一样。
*/

// 函数声明


int main ()
{
   // 局部变量声明
   int a = 100;
   int b = 200;
 
   cout << "交换前，a 的值：" << a << endl;
   cout << "交换前，b 的值：" << b << endl;

   /* 调用函数来交换值
    * &a 表示指向 a 的指针，即变量 a 的地址 
    * &b 表示指向 b 的指针，即变量 b 的地址 
    */
   swap(&a, &b);

   cout << "交换后，a 的值：" << a << endl;
   cout << "交换后，b 的值：" << b << endl;
 
   return 0;
}

/*向函数传递参数的引用调用方法，把引用的地址复制给形式参数。
在函数内，该引用用于访问调用中要用到的实际参数。这意味着，修改形式参数会影响实际参数。

按引用传递值，参数引用被传递给函数，就像传递其他值给函数一样。因此相应地，在下面的函数 swap() 中，
您需要声明函数参数为引用类型，该函数用于交换参数所指向的两个整数变量的值。 */

#include<iostream>

using namespace std;
 
// 函数声明
//void swap(int x, int y);
//void swap(int *x, int *y);
void swap(int& x, int& y);

int main ()
{
   // 局部变量声明
   int a = 100;
   int b = 200;
 
   cout << "交换前，a 的值：" << a << endl;
   cout << "交换前，b 的值：" << b << endl;
 
   /* 调用函数来交换值 */
   swap(a, b);
   /*/
   * 调用函数来交换值
    * &a 表示指向 a 的指针，即变量 a 的地址 
    * &b 表示指向 b 的指针，即变量 b 的地址 
    */
   //swap(&a, &b);
 
   cout << "交换后，a 的值：" << a << endl;
   cout << "交换后，b 的值：" << b << endl;
 
   return 0;
}
 
// 函数定义
//void swap(int& x, int& y)
void swap(int& x, int& y)
{
   int temp;
   temp = x; /* 保存地址 x 的值 */
   cout << temp;
   x = y;    /* 把 y 赋值给 x */
   cout << x ;
   y = temp; /* 把 x 赋值给 y  */
   cout << y;
  
   return;
}